@model ProjeTakip.Models.ViewModels.TaskVM

@{
    ViewData["Title"] = "Yeni Görev Ekle";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="Create" method="post">
    <div class="form-group">
        <label asp-for="TaskName" class="control-label"></label>
        <input asp-for="TaskName" class="form-control" />
        <span asp-validation-for="TaskName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TaskDescription" class="control-label"></label>
        <textarea asp-for="TaskDescription" class="form-control"></textarea>
        <span asp-validation-for="TaskDescription" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="UserId" class="control-label">Atanan Kullanıcı</label>
        <select asp-for="UserId" class="form-control" asp-items="Model.Users">
            <option value="">Bir kullanıcı seçin</option>
        </select>
        <span asp-validation-for="UserId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="ProjectId" class="control-label">Proje</label>
        <select asp-for="ProjectId" class="form-control" asp-items="Model.Projects">
            <option value="">Bir proje seçin</option>
        </select>
        <span asp-validation-for="ProjectId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="StartDate"></label>
        <input asp-for="StartDate" type="date" class="form-control" id="startDate" />
        <span asp-validation-for="StartDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="EndDate"></label>
        <input asp-for="EndDate" type="date" class="form-control" id="endDate" />
        <span asp-validation-for="EndDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <input type="submit" value="Kaydet" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary">Geri Dön</a>
    </div>
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Bugünün tarihi
            var today = new Date().toISOString().split('T')[0];
            // İki gün sonrası
            var twoDaysLater = new Date();
            twoDaysLater.setDate(twoDaysLater.getDate() + 2);
            var endDate = twoDaysLater.toISOString().split('T')[0];

            // Tarihleri input alanlarına ata
            document.getElementById('startDate').value = today;
            document.getElementById('endDate').value = endDate;

            // Başlangıç tarihi değiştiğinde bitiş tarihini güncelle
            document.getElementById('startDate').addEventListener('change', function () {
                var startDate = new Date(this.value);
                var minEndDate = new Date(startDate);
                minEndDate.setDate(minEndDate.getDate() + 2);
                var minEndDateStr = minEndDate.toISOString().split('T')[0];

                // EndDate inputunun minimum değerini güncelle
                var endDateInput = document.getElementById('endDate');
                endDateInput.setAttribute('min', minEndDateStr);

                // EndDate'in geçerli değeri minimum tarihten küçükse güncelle
                if (new Date(endDateInput.value) < minEndDate) {
                    endDateInput.value = minEndDateStr;
                }
            });

            // Sayfa yüklendiğinde, EndDate'in minimum değeri StartDate'ten iki gün sonrası olmalı
            var startDate = new Date(document.getElementById('startDate').value);
            var minEndDate = new Date(startDate);
            minEndDate.setDate(minEndDate.getDate() + 2);
            var minEndDateStr = minEndDate.toISOString().split('T')[0];
            document.getElementById('endDate').setAttribute('min', minEndDateStr);
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}